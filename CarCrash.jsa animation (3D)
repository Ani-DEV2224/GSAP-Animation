<!DOCTYPE html>
<html>
<head>
    <title>Gillani Law Car Crash</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/objects/Sky.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Sky and lighting
        const sky = new THREE.Sky();
        sky.scale.setScalar(10000);
        scene.add(sky);

        const skyUniforms = sky.material.uniforms;
        skyUniforms['turbidity'].value = 1;
        skyUniforms['rayleigh'].value = 1;
        skyUniforms['sunPosition'].value.set(0, 100, -50);

        // Enhanced lighting
        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
        hemiLight.position.set(0, 100, 0);
        scene.add(hemiLight);

        // Cars with specified colors
        function createCar(color) {
            const car = new THREE.Group();
            const body = new THREE.Mesh(
                new THREE.BoxGeometry(4, 2, 2),
                new THREE.MeshPhongMaterial({ color: color })
            );
            car.add(body);

            // Wheels
            const wheelGeometry = new THREE.CylinderGeometry(0.5, 0.5, 1, 32);
            const wheelMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
            for(let i = 0; i < 4; i++) {
                const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
                wheel.rotation.z = Math.PI/2;
                wheel.position.x = i % 2 === 0 ? -1.5 : 1.5;
                wheel.position.y = -1;
                wheel.position.z = i < 2 ? -1 : 1;
                car.add(wheel);
            }

            // Roof
            const roof = new THREE.Mesh(
                new THREE.BoxGeometry(2, 1, 2),
                new THREE.MeshPhongMaterial({ color: color })
            );
            roof.position.y = 1;
            car.add(roof);

            return car;
        }

        // Create colored cars
        const car1 = createCar(0x8B8000); // Dark yellow
        const car2 = createCar(0x006400); // Dark green
        car1.position.set(-20, -1, 0);
        car2.position.set(20, -1, 0);
        car2.rotation.y = Math.PI;
        scene.add(car1, car2);

        // Gillani Law logo
        let logoMesh = null;
        new THREE.TextureLoader().load(
            'https://gillanilaw.com/wp-content/uploads/2023/11/GL-Logo.png',
            (texture) => {
                const logoMaterial = new THREE.MeshBasicMaterial({
                    map: texture,
                    transparent: true,
                    opacity: 0
                });
                logoMesh = new THREE.Mesh(
                    new THREE.PlaneGeometry(12, 6),
                    logoMaterial
                );
                logoMesh.position.set(0, 8, -5);
                logoMesh.visible = false;
                scene.add(logoMesh);
            }
        );

        // Environment (road, trees, mountains)
        // ... [Keep all environment code from previous version] ...

        // Animation control
        let crashOccurred = false;
        const speed = 0.3;

        function animate() {
            requestAnimationFrame(animate);

            if(!crashOccurred) {
                car1.position.x += speed;
                car2.position.x -= speed;

                if(car1.position.x >= 0 && car2.position.x <= 0) {
                    crashOccurred = true;
                    // Crash animation
                    car1.rotation.z = -0.2;
                    car2.rotation.z = 0.2;
                    car1.position.y = 0.5;
                    car2.position.y = 0.5;
                    
                    // Show logo
                    if(logoMesh) {
                        logoMesh.visible = true;
                        logoMesh.material.opacity = Math.min(1, logoMesh.material.opacity + 0.015);
                        logoMesh.position.y += (10 - logoMesh.position.y) * 0.02;
                        logoMesh.lookAt(camera.position);
                    }
                }
            }

            renderer.render(scene, camera);
        }

        // Camera and controls
        camera.position.set(0, 15, 30);
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;

        // ... [Keep resize handler and other utilities] ...
        
        animate();
    </script>
</body>
</html>
