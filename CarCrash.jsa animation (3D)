"use client";

import { Canvas } from "@react-three/fiber";
import { useGLTF, Environment, Html } from "@react-three/drei";
import { Physics, useBox } from "@react-three/cannon";
import { Suspense, useRef, useState } from "react";
import { gsap } from "gsap";

export default function CarCrash() {
  return (
    <div className="canvas-container">
      <Canvas camera={{ position: [0, 2, 10], fov: 50 }}>
        <Suspense fallback={<Html>Loading...</Html>}>
          <Environment preset="city" />
          <ambientLight intensity={0.5} />
          <directionalLight position={[5, 5, 5]} />
          <Physics>
            <CarScene />
          </Physics>
        </Suspense>
      </Canvas>
    </div>
  );
}

function CarScene() {
  const car1Ref = useRef();
  const car2Ref = useRef();
  const [showLogo, setShowLogo] = useState(false);

  const car1 = useGLTF("/models/car1.gltf");
  const car2 = useGLTF("/models/car2.gltf");

  const [car1PhysicsRef] = useBox(() => ({
    mass: 1,
    position: [-5, 0.5, 0],
    args: [2, 1, 4],
  }));

  const [car2PhysicsRef] = useBox(() => ({
    mass: 1,
    position: [5, 0.5, 0],
    args: [2, 1, 4],
  }));

  const triggerCrash = () => {
    gsap.to(car1PhysicsRef.current.position, {
      x: 0,
      duration: 1.5,
      ease: "power3.out",
    });

    gsap.to(car2PhysicsRef.current.position, {
      x: 0,
      duration: 1.5,
      ease: "power3.out",
      onComplete: () => {
        setShowLogo(true);
      },
    });
  <!DOCTYPE html>
<html>
<head>
    <title>Car Crash Animation - Gillani Law</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Add lights
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 1);
        pointLight.position.set(25, 50, 25);
        scene.add(pointLight);

        // Create logo
        let logoMesh = null;
        const textureLoader = new THREE.TextureLoader();
        textureLoader.load(
            'https://gillanilaw.com/wp-content/uploads/2023/11/GL-Logo.png', // Update with actual logo path
            (texture) => {
                const logoMaterial = new THREE.MeshBasicMaterial({
                    map: texture,
                    transparent: true,
                    opacity: 0
                });
                const logoGeometry = new THREE.PlaneGeometry(12, 6); // Adjust aspect ratio as needed
                logoMesh = new THREE.Mesh(logoGeometry, logoMaterial);
                logoMesh.position.set(0, 8, -5); // Position above crash scene
                logoMesh.visible = false;
                scene.add(logoMesh);
            },
            undefined,
            (err) => {
                console.error('Error loading logo:', err);
            }
        );

        // ... [Keep all car creation code from previous version] ...

        // Animation variables
        let crashOccurred = false;
        let logoVisible = false;
        const crashPosition = 0;
        const speed = 0.3;

        // Enhanced logo animation
        function showLogo() {
            if(!logoMesh) return;
            
            logoMesh.visible = true;
            logoMesh.material.opacity = Math.min(1, logoMesh.material.opacity + 0.015);
            logoMesh.position.y += (8.5 - logoMesh.position.y) * 0.05;
            logoMesh.scale.x = logoMesh.scale.y = Math.min(1, logoMesh.scale.x + 0.015);
            
            // Maintain camera-facing position
            logoMesh.quaternion.copy(camera.quaternion);
        }

        // ... [Keep rest of the animation and scene setup code] ...
    </script>
</body>
</html>
